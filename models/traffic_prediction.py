# -*- coding: utf-8 -*-
"""Traffic_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ervQaUZNIXCNlIapg9tzI4wmX5n_iYdT
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import pandas as pd

df=pd.read_csv("/content/drive/MyDrive/Traffic.csv")

df.head(5)

year = 2023
month = 1

# Create a new 'Datetime' column by merging 'Date', 'Time', 'month', and 'year'
df['Datetime'] = pd.to_datetime(df['Date'].astype(str) + '-' + str(month) + '-' + str(year) + ' ' + df['Time'])

# Drop the now redundant 'Date' and 'Time' columns if needed
df.drop(columns=['Date', 'Time'], inplace=True)

df.head(5)

# Extract Day of the week
day_map = {
    'Sunday': 0, 'Monday': 1, 'Tuesday': 2, 'Wednesday': 3,
    'Thursday': 4, 'Friday': 5, 'Saturday': 6
}

# Extract day of the week from 'Day of the week' column
df['DayOfWeek'] = df['Day of the week'].map(day_map)

# Create a Weekend indicator
df['IsWeekend'] = df['DayOfWeek'].isin([5, 6]).astype(int)

day_map1 = {
    'low': 0, 'normal': 1, 'heavy': 2, 'high': 3,

}

# Extract day of the week from 'Day of the week' column
df['Traffic Situation'] = df['Traffic Situation'].map(day_map1)

df=df.drop(['Day of the week'],axis=1)

df.head(5)

df.info()

# Convert the 'Datetime' column to datetime dtype if it's not already
df['Datetime'] = pd.to_datetime(df['Datetime'])

# Convert 'Datetime' to timestamp (seconds since Unix epoch)
df['Timestamp'] = df['Datetime'].apply(lambda x: x.timestamp())

# Drop the original 'Datetime' column if it's no longer needed
df.drop(columns=['Datetime'], inplace=True)

df.head(10)

X=df.drop('Traffic Situation',axis=1)
y=df['Traffic Situation']

X

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.ensemble import RandomForestClassifier
import joblib

model = RandomForestClassifier()

model.fit(X_train, y_train)
joblib.dump(model, 'traffic_model.joblib')
y_pred = model.predict(X_test)

from sklearn.metrics import accuracy_score, classification_report

print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))

