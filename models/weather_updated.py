# -*- coding: utf-8 -*-
"""Weather_Updated.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FNuETkS90csQSXf9BSqh4nrn7TMu7uB9
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import pandas as pd

df=pd.read_csv("/content/drive/MyDrive/seattle-weather.csv")

df.head(10)

df=df.drop('date',axis=1)

df.head(10)

df.info()

df['weather'].unique()

weather_map = {
    'drizzle': 0, 'rain': 1, 'sun': 2, 'snow': 3,
    'fog': 4
}

# Extract day of the week from 'Day of the week' column
df['Weather'] = df['weather'].map(weather_map)

df.info()

df.tail(5)

df=df.drop('weather',axis=1)

df.head(10)

df.drop_duplicates()

df.shape

X=df.drop("Weather",axis=1)
y=df['Weather']

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import joblib
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)
joblib.dump(scaler, 'scalerw.joblib')

from sklearn.ensemble import RandomForestClassifier

rf = RandomForestClassifier(random_state=42)

param_grid = {
    'n_estimators': [100, 200, 300],
    'max_depth': [None, 10, 20, 30],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4],
    'bootstrap': [True, False]
}

from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import accuracy_score, classification_report
import joblib
grid_search = GridSearchCV(estimator=rf, param_grid=param_grid, cv=3, n_jobs=-1, verbose=2)



grid_search.fit(X_train, y_train)
joblib.dump(grid_search, 'weatherg_model.joblib')

best_rf = grid_search.best_estimator_

y_pred = best_rf.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print(f'Best Random Forest Model Accuracy: {accuracy}')

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, classification_report



# Define and train the Naive Bayes Classifier
nb_classifier = GaussianNB()
nb_classifier.fit(X_train, y_train)

# Predict on the test set
y_pred = nb_classifier.predict(X_test)

# Calculate accuracy
accuracy = accuracy_score(y_test, y_pred)
print("Naive Bayes Classifier Test Accuracy:", accuracy)

# Print classification report
print("Classification Report:")
print(classification_report(y_test, y_pred))

import joblib
print(joblib.__version__)

import sklearn
print(sklearn.__version__)

