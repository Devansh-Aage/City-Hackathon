# -*- coding: utf-8 -*-
"""Power_Consumption.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gBmLZq_LZ07jtiNQfgvZpKKxtMpp_0Ek
"""

import numpy as np
import pandas as pd

from google.colab import drive
drive.mount('/content/drive')

df=pd.read_csv("/content/drive/MyDrive/long_data_.csv")

df.tail()

df.shape

df.isnull().sum()

df=df.drop('Dates',axis=1)

df.head(10)

df['Regions'].unique()

df['States'].unique()

# @title
from sklearn.preprocessing import LabelEncoder


label_encoder = LabelEncoder()
df['States'] = label_encoder.fit_transform(df['States'])
state_mapping = dict(zip(label_encoder.classes_, label_encoder.transform(label_encoder.classes_)))

# Print state to number mapping
print("State to number mapping:")
for state, number in state_mapping.items():
    print(f"{state}: {number}")

df['Regions'] = label_encoder.fit_transform(df['Regions'])


state_mapping = dict(zip(label_encoder.classes_, label_encoder.transform(label_encoder.classes_)))

# Print state to number mapping
print("State to number mapping:")
for state, number in state_mapping.items():
    print(f"{state}: {number}")

df.head(5)

X=df.drop('Usage',axis=1)

y=df['Usage']

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

import pandas as pd
from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.ensemble import RandomForestRegressor
import joblib

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)
joblib.dump(scaler, 'scaler.joblib')

rf = RandomForestRegressor(random_state=42)

rf_param_grid = {
    'n_estimators': [100, 200, 300],
    'max_depth': [None, 10, 20, 30],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4]
}

rf_grid_search = GridSearchCV(estimator=rf, param_grid=rf_param_grid, cv=5, scoring='neg_mean_squared_error', verbose=1, n_jobs=-1)

rf_grid_search.fit(X_train_scaled, y_train)
joblib.dump(rf_grid_search, 'power_model.joblib')

best_rf = rf_grid_search.best_estimator_

y_pred_rf = best_rf.predict(X_test_scaled)

mse_rf = mean_squared_error(y_test, y_pred_rf)
rmse_rf = mse_rf ** 0.5
r2_rf = r2_score(y_test, y_pred_rf)

print("Random Forest Regressor")
print(f"Test Set Mean Squared Error: {mse_rf}")
print(f"Test Set Root Mean Squared Error: {rmse_rf}")
print(f"Test Set R^2 Score: {r2_rf}")



